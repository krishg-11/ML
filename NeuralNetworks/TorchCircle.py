'''
Goof: 80-79
0.weight tensor([[-0.1226, -0.2861],
        [ 0.0219, -0.1213],
        [-6.1380, -0.5292],
        [ 0.0331,  0.0462],
        [ 0.2110,  0.1514],
        [-0.0880, -0.1740],
        [-1.2735,  7.2246],
        [-0.1184, -0.2132],
        [ 5.6832,  1.1366],
        [-0.0838, -0.0796],
        [ 0.1147,  4.2867],
        [ 2.5514,  0.8089],
        [ 0.9630, -8.0187],
        [ 1.8904, -3.6602]])
0.bias tensor([-2.4426, -2.4629, -4.6029, -2.4780, -2.5467, -2.4608, -6.1978, -2.4341,
        -4.4473, -2.4845,  1.6507, -2.2366, -6.1123,  1.3322])
2.weight tensor([[-3.1119e-01, -2.1769e-01, -1.2430e+00, -4.4756e-01, -2.8071e-01,
         -2.8290e-01, -1.1062e+00, -3.4079e-01, -1.4537e+00, -1.2565e-01,
         -4.9451e-01, -4.2831e-01, -1.0397e+00, -2.4662e-01],
        [-4.4892e-01, -2.1193e-01,  5.6085e+00, -1.5679e-01, -4.5656e-01,
         -5.0282e-01,  5.4882e+00, -5.0993e-01,  7.6655e+00, -2.8995e-01,
         -3.8889e+00,  8.8894e-01,  4.0826e+00, -3.0907e+00],
        [-1.2851e-01, -1.3495e-01, -1.9416e+00, -1.1362e-02, -3.4328e-01,
         -1.8136e-02, -1.7618e+00, -1.4063e-01, -2.3616e+00, -1.5791e-01,
          5.0529e-01, -4.5403e-01, -1.3882e+00,  2.8097e-01],
        [ 3.7448e-01,  1.1954e-01, -5.7971e+00,  2.2163e-01, -2.8447e-01,
          7.2396e-02, -5.4757e+00,  3.3349e-01, -8.0171e+00,  1.5592e-02,
          4.1481e+00, -1.1137e+00, -4.0801e+00,  3.3162e+00],
        [-2.0083e-01, -6.5739e-01,  4.0929e+00, -2.8948e-01, -5.1483e-01,
         -5.4645e-01,  3.9522e+00, -6.2528e-02,  5.9183e+00, -7.5630e-01,
         -2.6922e+00,  5.2878e-01,  3.2986e+00, -2.3493e+00],
        [ 7.6750e-02,  3.7162e-03, -3.6127e+00,  6.8411e-02, -2.9614e-01,
          1.5825e-01, -3.4590e+00,  2.4778e-01, -4.9020e+00,  1.1313e-01,
          2.4495e+00, -6.4931e-01, -2.5330e+00,  1.9563e+00]])
4.weight tensor([[-0.0811, -0.7419, -0.3946, -0.7651, -0.6121, -0.6706],
        [-1.5210,  6.4416, -2.4603, -7.2033,  5.1905, -4.5600],
        [ 0.8882, -4.6113,  1.3864,  4.9401, -3.0783,  3.2144]])
6.weight tensor([[-1.0479,  7.8057, -6.2746],
        [-0.2459, -7.1036,  6.1116]])
8.weight tensor([[-10.2127,  10.2844]])

goof:107-119 [3, 5, 3, 1, 1]
0.weight tensor([[ 3.0073,  2.5343],
        [-0.3947,  3.9695],
        [-2.2857,  0.7107],
        [ 2.6751, -1.5098],
        [-4.6686,  1.8881]])
0.bias tensor([-2.1416,  2.2335, -0.6411, -3.3911, -3.2366])
2.weight tensor([[ -4.5659,   4.7174,  -1.7304,  -0.4936,  -2.9290],
        [ 22.3323, -21.2646,   8.8459,   6.5066,  15.0749],
        [-10.2032,   9.7366,  -3.5734,  -2.3167,  -7.1697]])
4.weight tensor([[ 10.0233, -35.2963,  18.6476]])
6.weight tensor([[1.0036]])
'''

from random import uniform
import math
import sys
import re

global transType
transfers = {"T1":lambda x: x, "T2": lambda x: max(0,x), "T3": lambda x: 1/(1+math.exp(-x)), "T4": lambda x: (-1 + 2/(1+math.exp(-x)))}
transDerivs = {"T1": lambda y:1, "T2": lambda y: 1 if y>1 else 0, "T3": lambda y: y*(1-y), "T4": lambda y: (1-y*y)/2}
transType = "T3"

def dot(a,b):
    return sum([a[i]*b[i] for i in range(len(a))])

def feedforward(inputs, weights):
    global transType
    ffInfo = [inputs]
    currLayer = inputs
    lastLayer = weights[-1]
    for k in range(len(weights)-1):
        layerWeights = weights[k]
        layerOutputs = []
        for j in range(0,len(layerWeights),len(currLayer)):
            layerOutputs.append(transfers[transType](dot(currLayer,layerWeights[j:j+len(currLayer)])))
        ffInfo.append(layerOutputs)
        currLayer = layerOutputs
    finalOutput = [currLayer[i]*lastLayer[i] for i in range(len(currLayer))]
    ffInfo.append(finalOutput)
    return ffInfo

layerLens = [3, 14, 6, 3, 2, 1, 1]

weights = [
            [-0.1226, -0.2861,  0.0219, -0.1213, -6.1380, -0.5292,  0.0331,  0.0462,  0.2110,  0.1514, -0.0880, -0.1740, -1.2735,  7.2246, -0.1184, -0.2132,  5.6832,  1.1366, -0.0838, -0.0796,  0.1147,  4.2867,  2.5514,  0.8089,  0.9630, -8.0187,  1.8904, -3.6602, -2.4426, -2.4629, -4.6029, -2.4780, -2.5467, -2.4608, -6.1978, -2.4341,
                    -4.4473, -2.4845,  1.6507, -2.2366, -6.1123,  1.3322],
            [-3.1119e-01, -2.1769e-01, -1.2430e+00, -4.4756e-01, -2.8071e-01,
                     -2.8290e-01, -1.1062e+00, -3.4079e-01, -1.4537e+00, -1.2565e-01,
                     -4.9451e-01, -4.2831e-01, -1.0397e+00, -2.4662e-01, -4.4892e-01, -2.1193e-01,  5.6085e+00, -1.5679e-01, -4.5656e-01,
                     -5.0282e-01,  5.4882e+00, -5.0993e-01,  7.6655e+00, -2.8995e-01,
                     -3.8889e+00,  8.8894e-01,  4.0826e+00, -3.0907e+00, -1.2851e-01, -1.3495e-01, -1.9416e+00, -1.1362e-02, -3.4328e-01,
                     -1.8136e-02, -1.7618e+00, -1.4063e-01, -2.3616e+00, -1.5791e-01,
                      5.0529e-01, -4.5403e-01, -1.3882e+00,  2.8097e-01,  3.7448e-01,  1.1954e-01, -5.7971e+00,  2.2163e-01, -2.8447e-01,
                      7.2396e-02, -5.4757e+00,  3.3349e-01, -8.0171e+00,  1.5592e-02,
                      4.1481e+00, -1.1137e+00, -4.0801e+00,  3.3162e+00, -2.0083e-01, -6.5739e-01,  4.0929e+00, -2.8948e-01, -5.1483e-01,
                     -5.4645e-01,  3.9522e+00, -6.2528e-02,  5.9183e+00, -7.5630e-01,
                     -2.6922e+00,  5.2878e-01,  3.2986e+00, -2.3493e+00,  7.6750e-02,  3.7162e-03, -3.6127e+00,  6.8411e-02, -2.9614e-01,
                      1.5825e-01, -3.4590e+00,  2.4778e-01, -4.9020e+00,  1.1313e-01,
                      2.4495e+00, -6.4931e-01, -2.5330e+00,  1.9563e+00],
            [-0.0811, -0.7419, -0.3946, -0.7651, -0.6121, -0.6706,-1.5210,  6.4416, -2.4603, -7.2033,  5.1905, -4.5600, 0.8882, -4.6113,  1.3864,  4.9401, -3.0783,  3.2144],
            [-1.0479,  7.8057, -6.2746, -0.2459, -7.1036,  6.1116],
            [-10.2127,  10.2844],
            [1],

]
input = sys.argv[1]
regex = re.search(r"(>|<)=?([.0-9]+)", input)

greater, r = regex.groups()
r = float(r)
print(r)

weightStart = 0
biasStart = (layerLens[0]-1)*layerLens[1]
temp = []
for i in range(layerLens[1]):
    temp.extend([weights[0][weightStart], weights[0][weightStart+1], weights[0][biasStart]])
    weightStart+=2
    biasStart+=1
weights[0]=temp

const = 1/(r**0.5)
weights[0] = [w*const if (pos+1)%3 else w for pos,w in enumerate(weights[0])]

print(greater)
if(greater == ">"):
    weights[-2] = [-x for x in weights[-2]]

print("Layer cts :", layerLens)
print("Weights:")
for x in weights: print(x)
print()
#
# goofs = 0
# for i in range(100000):
#     inputs = [uniform(-1.5, 1.5), uniform(-1.5, 1.5), 1.0]
#     x,y,z = inputs
#     # print(x,y,z)
#
#     output = feedforward(inputs, weights)[-1][0]
#     # print(output)
#     output = 1.0 if output>0.5 else 0.0
#     # print(output)
#
#     ex = float(x**2 + y**2 <= r)
#     if(greater==">"):
#         ex = float(x**2 + y**2 >= r)
#     # print(ex)
#     # print()
#
#     goofs += output!=ex
#
# print(goofs, "/100000")
